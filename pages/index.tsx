import Head from 'next/head'
import {useState} from 'react'
import {Color} from '../components/Color'
import {Tile} from '../components/Tile'
import {
  generateAllTiles,
  Piece,
  play,
  shuffle,
  sortPieces,
} from '../components/utils'

const tiles = shuffle(generateAllTiles())

const fixedTest: Piece[] = [
  {value: 1, color: Color.BLACK},
  {value: 1, color: Color.BLACK},
  {value: 2, color: Color.BLACK},
  {value: 2, color: Color.BLACK},
  {value: 3, color: Color.BLACK},
  {value: 3, color: Color.BLACK},
  {value: 3, color: Color.BLACK},
  {value: 4, color: Color.BLACK},
  {value: 4, color: Color.BLACK},
  {value: 4, color: Color.BLACK},
  {value: 4, color: Color.BLACK},
  {value: 5, color: Color.BLACK},
  {value: 5, color: Color.BLACK},
  {value: 5, color: Color.BLACK},
  {value: 5, color: Color.BLACK},
  {value: 6, color: Color.BLACK},
  {value: 7, color: Color.BLACK},
  {value: 8, color: Color.BLACK},
  {value: 8, color: Color.BLACK},
  {value: 8, color: Color.BLACK},
  {value: 9, color: Color.BLACK},
  {value: 9, color: Color.BLACK},
  {value: 9, color: Color.BLACK},
  {value: 10, color: Color.BLACK},
  {value: 11, color: Color.BLACK},
  {value: 11, color: Color.BLACK},
  {value: 12, color: Color.BLACK},
  {value: 13, color: Color.BLACK},
]

export default function Home() {
  const [bag, setBag] = useState<Piece[]>(tiles)
  const [player, setPlayer] = useState<Piece[]>([])
  const [board, setBoard] = useState<Piece[][]>([])
  const [loading, setLoading] = useState(false)

  const [recurseCount, setRecurseCount] = useState(0)
  const [solutionsEnvisaged, setSolutionsEnvisaged] = useState(0)
  const [
    solutionsEnvisagedOnlyPlayerLeft,
    setSolutionsEnvisagedOnlyPlayerLeft,
  ] = useState(0)

  const draw = () => {
    const piece = bag.pop()
    setBag(bag)
    if (piece) {
      setPlayer([...player, piece])
    }
  }

  const runSimulation = async () => {
    setLoading(true)

    const result = await play(board.flat(), player)
    setPlayer(result.playerPieces)
    setBoard(result.sequences)
    setSolutionsEnvisaged(result.solutionsEnvisaged)
    setSolutionsEnvisagedOnlyPlayerLeft(result.solutionsEnvisagedOnlyPlayerLeft)
    setRecurseCount(result.recurseCount)

    setLoading(false)
  }

  const sort = () => {
    setPlayer(sortPieces(player))
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-6">
        <h3>Table</h3>
        <div className="flex flex-wrap space-x-3">
          {board.map((sequence) => (
            <div className="flex flex-nowrap">
              {sequence.map((tile) => (
                <Tile value={tile.value} color={tile.color} />
              ))}
            </div>
          ))}
        </div>

        <h3>Player {player.length} pieces</h3>
        {player.map((tile) => (
          <Tile value={tile.value} color={tile.color} />
        ))}

        <div className="pt-5">
          <span className="relative z-0 inline-flex shadow-sm rounded-md">
            <button
              className="relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              type="button"
              onClick={draw}
            >
              Draw
            </button>

            <button
              className="-ml-px relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              type="button"
              onClick={sort}
            >
              Sort
            </button>

            <button
              className="-ml-px relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              type="button"
              onClick={runSimulation}
              disabled={loading}
            >
              {loading ? 'Loading' : 'Simulate'}
            </button>
          </span>
        </div>
        <div>
          <p>Solution envisaged: {solutionsEnvisaged}</p>
          <p>
            Solution envisaged with only player tiles left:{' '}
            {solutionsEnvisagedOnlyPlayerLeft}
          </p>
          <p>Recurse count: {recurseCount}</p>
        </div>

        <h3>Bag</h3>
        {bag.map((tile) => {
          return <Tile value={tile.value} color={tile.color} />
        })}
      </main>
    </div>
  )
}
